[
["index.html", "A stats book Preface", " A stats book Marc Kissel and Kaitie Schuping 2019-10-12 Preface This is the very first part of the book. "],
["introduction.html", "Chapter 1 Introduction", " Chapter 1 Introduction An Introduction to Statistical Software Unit Questions: Why Use R? (R versus Excel) What is the role of statistics in Anthropology? How do you formulate statistical questions? How do you download the program? R is an interactive statistical program that assists in the organization and analysis of data. R is a language that exists within an environment. The word environment is associated with the R software in that R allows the user to run linear models, nonlinear regressions, time series analysis, parametric tests, etc. within an open network. The R environment is a “planned and coherent system, rather than an incremental accretion of a very specific and inflexible tools, as is frequently the case with other data analysis software.” (cran.r-project.org). R differs from Excel in that it technically is a more user-friendly program [see chpt XXX on spreadsheets] . While Excel may appear to be an easier software to use, if a mistake or problem occurs in Excel, it can be very hard to find the origin of the issue and correct it. R does have a learning curve and it can be intimidating, but it can be a really amazing data tool once the basics are understood. R can do everything that excel does and more. Since many people prefer to use Excel, many of the data files that you will use and upload into R will be stored in an unreadable format. In order to upload an Excel file into R, you need to save the Excel file as a csv. There are packages that allow you to read in an Excel file as well. The word “code” refers to the text used in computer programming language which is called the source code. Metadata is the data about data, it contains analytical descriptions about the original data. (explain base R verses Tidy Verse) There are multiple packages available for download within R. These include base R, compiler, datasets, grDevices, graphics, graid, methods, parallel, splines, stats, stats4, tcltk, tools, utils. Most of readR’s functions are concerned with turning flat files into data frames. The command read_csv( ) creates a pathway by which a file is able to be transferred and read within the R environment. It is important to note that everything within R is an object. Everything object within R is either a call, an expression, a name or a null. There is a lot of available information on how to use R but filtering through online search results can be a challenge. Almost all of your questions can be answered by a google search and there are many online forums where R experts discuss the problems that they have had with R. If posed with a problem, try not to think big as it is likely that there is a singular small problem causing your issue. As we learned R we found ourselves struggling a lot. Don’t think that you are alone. "],
["now-what.html", "Chapter 2 Now What 2.1 R-basics", " Chapter 2 Now What So, I Downloaded R, Now What 2.1 R-basics "],
["technical-details.html", "Chapter 3 Technical Details", " Chapter 3 Technical Details here we can put a full code for students to check out "],
["how-computers-and-r-think.html", "Chapter 4 How Computers (and R) Think 4.1 file/folder management 4.2 file types 4.3 types of files you might see in the wild and what they are 4.4 Accessing internet resources 4.5 refs for this section", " Chapter 4 How Computers (and R) Think What is going on behind the scenes This chapter has a lot of background info on using computers. A lot of this is basically random tips and tricks and info that we’ve picked up over the years, Mostly as non-computer science folks coming across terms and ideas that are basic in the comp-sci world but not in the anthropology world. In other words, this is a repository of things that you might one day care about. As always a work in progress so let us know if something is missing/wrong/needs to be updated etc. 4.1 file/folder management One of the first things you want to start doing to work more efficiently in R (and in general) is to think about how best to manage files and folders. Once you get the hang of R it is easy to get a data set and just dump it into a temp folder to check it out. But this can get messy. This section gives tips on how to name and use file management so that your code is easy to use by co-authors (which could include yourself 2 years from now) 4.1.1 file names In programming it is often a bad idea to have spaces in function names. It also is sometimes difficult to ‘read in’ files with spaces in their names.1 Because of this many times we don’t want spaces in file names. There are a few ways to combine words, however, to make it easy to read Name example Snake case my_new_data Camel case myNewData Kebab case my-new-data Pascal case MyNewData Study question: What are the differences between these four types? Which do you like the best? Choose one and stick with that! It isn’t always easy, but keeping consistent file naming helps in the long run. It also helps to know a bit about how computers organize files. If you want a series of files to be able to be sorted in order a good trick is to label them like this: 01_first 02_second 03_third 04_fourth This allows you to sort the files by name and have them show up in order Thinking question: What are some examples of bad file names? in other words, what would be an example of a file name that wouldn’t help the you understand what is in it As you know @ref(R_basics) {FIX} As you know 2.1 4.1.2 dates Dealing with dates is not easy knitr::include_graphics(&quot;images/iso_8601.png&quot;) The ISO 8601 standard is YYYY-MM-DD. Computers deal with dates in different ways depending upon the operating system. However, in general they rely on system time, which is the amount of time (in seconds or nanoseconds) that have elapsed since a certain day. If you find yourself working with date data it is useful to learn more about this. In chpt XXX we talk a bit about this in terms of how Excel can cause problems with date time fields 4.2 file types A computer file is, in esscene, a string of 1s and 0s. Computers can tell what a file is (is it an image, a text, a video) by the extention, which is the name after the period in a full file name. For example, for the file nyc_temp_data.txt, the “.txt” tells the computer the file is a text file. MAYBE HAVE IMAGE HERE 4.3 types of files you might see in the wild and what they are JSON - JavaScript Object Notation This is common way to store info on webpages it looks like this, with a key and a value: {“name”: “Mary”, “Major”: “Anthropology”} To read JSON files into R you can use the jsonlite package and the fromJSON function.2 EXE - executable file a file that can be run by clicking on it CSV - Comma-separated values This is one of the most common ways to send and receive data. A CSV file is a simple text file that uses commas to deliminate, or separate, values. Such files store numbers and text only. It is useful since anyone can open them and doesn’t require proprietary software. sql - Structured Query Language Used for buidling databases where you might see it: exported data from Filemaker? html zip tar - Tape ARchive tar.gz - Tape ARchive compressed with gzip, a Unix function compressed file that o ften has multiple files stored in a single file iso - contains image that was from an optical disc like a DVD. a copy of everything on that disk You may want to mount the ISO file, which means it gets treated as if you are opening the real disc. you can also burn the ISO file onto an actual DVD Where you might see it: Large files, installing operating systems md - Markdown A file written in any one of several types of Markdown language, which allows someone to write a file in a text document but then convert to another format like HTML or PDF. Where you might see it: GitHub, rmd - R Markdown Markdown file that easily runs R code. Fun fact: this book was written in R Markdown Where you might see it: The chpts of this book 4.4 Accessing internet resources 4.4.1 what is an api An API is a “application programming interface.” For most of what we will use, we can think of it as a a code that lets us access information. we can send a request for the info we want hints for api: load ‘usethis’ run edit_r_environ() add api there see: https://usethis.r-lib.org/articles/articles/usethis-setup.html #accessing/using the terminal #computer languages you might come across Python #terms GUI IDE #useful programs Wox - for PC. lets you open files easy and search a bit #video and images 4.5 refs for this section ( Refs: https://www.tidyverse.org/articles/2017/12/workflow-vs-script/ This is because a space often means something special in computer languages.↩ for more info: https://stackoverflow.com/questions/16947643/getting-imported-json-data-into-a-data-frame↩ "]
]
