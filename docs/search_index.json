[
["index.html", "A stats book Preface", " A stats book Marc Kissel and Kaitie Schuping 2019-10-16 Preface This is the very first part of the book. "],
["introduction.html", "Chapter 1 Introduction 1.1 Ok, how do i get R? 1.2 R Studio 1.3 R projects 1.4 Short overview of how R works 1.5 lets practice", " Chapter 1 Introduction An Introduction to Statistical Software Unit Questions: Why Use R? (R versus Excel) What is the role of statistics in Anthropology? How do you formulate statistical questions? How do you download the program? R is an interactive statistical program that assists in the organization and analysis of data. R is a language that exists within an environment. The word environment is associated with the R software in that R allows the user to run linear models, nonlinear regressions, time series analysis, parametric tests, etc. within an open network. The R environment is a “planned and coherent system, rather than an incremental accretion of a very specific and inflexible tools, as is frequently the case with other data analysis software.” (cran.r-project.org). R differs from Excel in that it technically is a more user-friendly program [see chpt XXX on spreadsheets] . While Excel may appear to be an easier software to use, if a mistake or problem occurs in Excel, it can be very hard to find the origin of the issue and correct it. R does have a learning curve and it can be intimidating, but it can be a really amazing data tool once the basics are understood. R can do everything that excel does and more. Since many people prefer to use Excel, many of the data files that you will use and upload into R will be stored in an unreadable format. In order to upload an Excel file into R, you need to save the Excel file as a csv. There are packages that allow you to read in an Excel file as well. The word “code” refers to the text used in computer programming language which is called the source code. Metadata is the data about data, it contains analytical descriptions about the original data. (explain base R verses Tidy Verse) There are multiple packages available for download within R. These include base R, compiler, datasets, grDevices, graphics, graid, methods, parallel, splines, stats, stats4, tcltk, tools, utils. Most of readR’s functions are concerned with turning flat files into data frames. The command read_csv( ) creates a pathway by which a file is able to be transferred and read within the R environment. It is important to note that everything within R is an object. Everything object within R is either a call, an expression, a name or a null. There is a lot of available information on how to use R but filtering through online search results can be a challenge. Almost all of your questions can be answered by a google search and there are many online forums where R experts discuss the problems that they have had with R. If posed with a problem, try not to think big as it is likely that there is a singular small problem causing your issue. As we learned R we found ourselves struggling a lot. Don’t think that you are alone. 1.1 Ok, how do i get R? 1.1.1 install R and R Studio https://cloud.r-project.org, (this shld make most of the install automatic) note: I have multiple verions of R on computer. sometimes useful for packages that don’t work w/ certain versions install R studio here: http://www.rstudio.com/download. - get the free version 1.2 R Studio R studio is an integrated development environment (IDE) for R that makes it easier to work with R. It also does a lot of other things, likes let you build websites, create documents, and makes slides all with embeded stats and visualizations There are different panels. + the source - this is where we we write most of our code. R Studio allows for all sorts of tips and tricks here. That is one of the reasons we use this and not R itself + The console - this is where the R code is run. all lines in the console start with a ‘&gt;’. You can send stuff from the source to the console in a few ways. this is what R looks like without R studo lets look at what we can do in the panel - hit up to do histor - text then ctrl up - tab completion the history - shows what has been run the Enviornment plots and many others that become useful over time… Examine each of these and think about what they do? 1.2.1 lets look around… it should open and see panels if you go to profile -&gt; Global options can see all kinds of stuff take a look at what is there general layout of the program….what each pane is and how it works where is R looking for stuff? 1.3 R projects Probably the best thing you can do is learn to think in terms of projects. When we make a project we create a self-contained unit This helps us with a key feature - reproducibility If you have ever used Excel you may have made a chart. But can you remake that chart? not always easy. In R since everything is written down it is super easy to update/fix/edit things on the fly. This is a happy thing, especially if you want to ever publish something 1.4 Short overview of how R works One way that i think about R that helps me to work it is to remember that everything in R is an “object.” What this means is that in R we make objects (or we assign values to objects) and then do things to these objects. for example check out the code below a &lt;- 4 what this says is that we are going to create the object ‘a’ and then assign the value ‘4’ to it. if you run the code in R Studio you will see that the ‘environment’ panel now lists ‘a’ and gives its value. 1.4.1 Incomplete Code If you mess up (e.g. leave off a parenthesis), R might show a + sign prompting you to finish the command: &gt; (11+17-8 + Finish the command or hit Esc to get out of this. look at these fucntions and think about what they will do before running them.. LIST HERE some data analysis (http://datacarpentry.org/semester-biology/assignments/r-intro/) use the bird banding example maybe but turn it into an archy example take a dataset and import it into R. then do something to it. use my example above as a start 1.5 lets practice #library(ggnet) start R and open the project folder open a new R script and title it LASTNAME_FIRSTNAME_HW1 follow along with the info below. when it is time to do the excersie simply type in the Source and then run the command. This way you have a easy way to keep track of what you did to keep track of where you are, use # to make a comment like this # question 1 5 + 3 ## [1] 8 make sure to save your file often when you reach the end, save the file again! note: some of this comes from datacamp and other sources 1.5.0.1 Running Code The first thing we want to do is to learn how to run something in R. take a look at the code below: 6 + 7 ## [1] 13 the part in grey is the code that is entered into R. If you copy that over to your R console and hit enter you should see the answer how can you send a command from the Source pane to the Console Pane? 1.5.0.2 Basic math Now lets learn how to do basic math. Using whatever sources you can think of, figure out how to add, subtract, divide, multiply, take an exponent (i.e. square a number), get the square root. In other words, lets learn how to take an expensive computer and turn it into a $10 calculator solve the following using R 3-4 7 divided by 10 6 times 89 8 rasied to the 7th power the square root of 52 1.5.0.3 Assigning variables: One of the key things you will do is assign a value to an object. To do this we use this symbol &lt;-. x &lt;- 42 Read the above like: “assign the value of 42 to the object x.” or “x gets the value 42.” to store more than one element in an object we need to remember a trick if you want to make a series of numbers, characters, whatever, you need to use a special sequence. to do this, we must combine the values we want to assign with the c function, which combines values into a vector or list my_list &lt;- c(1,2,3,4,5) my_list_2 &lt;- c(&quot;my_name&quot;, &quot;my_address&quot;, &quot;my_number&quot;) How would you create a variable y and assign it the value 334 How you you add the x and y together to get the sum of the to numbers? How would you create a new varibale (x) that stores the result of x +y Now, change the value of x to be 500 and see what happens when you add x + y together? if you ask for the value of x now what do you get? why? What are the rules for what the name of an object in R can be? 1.5.0.4 Types of data Whe you assign a value to a variable, it is given a specific class. the class is VERY important and is probably the #1 reason for having troubles with R. The way in which you can interact with the object is based on the class of the object. The class of the object is assigned by R based on what it thinks the object is supposed to be it is always good to check the class of an object. to do this, we can use a specific function in R called class class types: (note: maybe make a table?) 1. intergers - ‘natural numbers’: 5, 6, 987 2. numerics - decimal numbers: 4.5, 8.76666 3. characters - text (sometimes called strings): “hello”, “goodbye” 4. logical - boolean: True or False 5. factors - categorical data. This is different from characters because factors are given numbers (or levels) that are assocated with that factor and then used for analysis…..we will come back to this later ADD LINK TO FACTOR SECTION a &lt;- 4 b &lt;- &quot;my name&quot; c &lt;- FALSE d &lt;- c(1,2,3.0,4) class(a) ## [1] &quot;numeric&quot; class(b) ## [1] &quot;character&quot; class(c) ## [1] &quot;logical&quot; class(d) ## [1] &quot;numeric&quot; x &lt;- 42 class(x) ## [1] &quot;numeric&quot; Note that the class of X here is numeric rather than an interger (which might not be want you expected). why? well, it has to do with some inside stuff on computer languages but in general R is going to store everything as numeric unless you tell it differently. In order to make it be an interger we need to use a trick, which is to add the suffix L to the number xx &lt;- 42L is.integer(xx) ## [1] TRUE assign my_value to be “hello”. then check its class you can also ask R directly if something is a specific type. my_value &lt;- 1+ 3 is.numeric(my_value) ## [1] TRUE my_name &lt;- &quot;Marc Kissel&quot; is.numeric(my_name) ## [1] FALSE is.character(my_name) #and how! ## [1] TRUE below is some R code. guess what each type of object will be and then use R to find the answer a &lt;- 1.333 b &lt;- TRUE c &lt;- &quot;my name is&quot; d &lt;- Sys.Date() # tricky remember: A class defines what kinds of operations can be implemented on an object &amp; how a function will return a value. It is important to keep track of the classes of your objects. Class mistakes are probably the most common kind of problem in R 1.5.0.5 What’s your vector, Victor? so far we have only stored one value into an object. but most of the time we are going to have to work with a lot of data. say you have a series of numbers and want to add 7 to each of them. it would be a pain to have to do that manually. we can use r to store a series of vaules (called a vector) my_vector &lt;- c(1,2,3,4,5) my_new_vector &lt;- c(6,7,8,9,10) let’s say you are doing some research and want to record the biological sex of the skeltons in your study. after analyzing them you decide that this is the correct designation male male female male female female female make a new object called my_study and make it a vector of the recorded biological sex print the object to R congrats! you now have a vector! lets say you want to figure out how what the sex of the 5th skeleton is. you could print the object and count, but that takes time and an get difficult. R makes things easier for people like me who are lazy and what the computer to do it all. to get an element from a list we use square brackets my_study[2] ## two ## &quot;male&quot; how would you get the sex of the third skeleton? can you figure out how, in one line of code, to get the sex of the 1st and 4th skeleton? Ok, but it is kinda confusing what these stand for. you know that they are skeletons 1-7, but maybe someone else doesn’t. We can assign names to objects using a special function called names names(my_study) &lt;- c(&quot;one&quot;, &quot;two&quot;, &quot;three&quot;, &quot;four&quot;, &quot;five&quot;, &quot;six&quot;, &quot;seven&quot;) print my_study now and see how it differs. Note: now that they have names we can also get the values that way my_study[2] ## two ## &quot;male&quot; my_study[&quot;two&quot;] ## two ## &quot;male&quot; #these are the same my_study[2] == my_study[&quot;two&quot;] # the &#39;==&#39; asks R to tell you if the value on the left and the value on the right are the same.... ## two ## TRUE to be fair, most of the time there are easier ways to name things, but having a basic understanding of how R works helps a lot 1.5.0.6 Matrices A vector is simply a list of numbers A matrix is a rectangular array of numbers cx1980 &lt;- c(7, 13, 8, 13, 5, 35, 9) cx1988 &lt;- c(9, 11, 15, 8, 9, 38, 0) chimp &lt;- cbind(cx1980, cx1988) # cbind binds the vectors together a columns class(chimp) ## [1] &quot;matrix&quot; chimp ## cx1980 cx1988 ## [1,] 7 9 ## [2,] 13 11 ## [3,] 8 15 ## [4,] 13 8 ## [5,] 5 9 ## [6,] 35 38 ## [7,] 9 0 One thing you want to learn is how to read a matrix and identify elements. Lets say you want to get a vector of just the ages from 1980. we can use the square brackets again but need to know a trick. chimp[1,] #note the comma ## cx1980 cx1988 ## 7 9 chimp[,1] ## [1] 7 13 8 13 5 35 9 #putting the number before the comma gets us the row. putting it after the comma gets column. #one way to remeber that Rows come first is the menominc Railway Cars chimp[3,2] # third row, second column ## cx1988 ## 15 how would you make a matrix by row rather than column (use google if need be) There are others ways to make a matirx look at the code below and figure out how it works freq &lt;- c(32,11,10,3, 38,50,25,15, 10,10,7,7, 3,30,5,8) hair &lt;- c(&quot;Black&quot;, &quot;Brown&quot;, &quot;Red&quot;, &quot;Blond&quot;) eyes &lt;- c(&quot;Brown&quot;, &quot;Blue&quot;, &quot;Hazel&quot;, &quot;Green&quot;) freqmat &lt;- matrix(freq, nr=4, nc=4, byrow=TRUE) dimnames(freqmat)[[1]] &lt;- hair dimnames(freqmat)[[2]] &lt;- eyes freqmat ## Brown Blue Hazel Green ## Black 32 11 10 3 ## Brown 38 50 25 15 ## Red 10 10 7 7 ## Blond 3 30 5 8 Now, create your own matrix with madeup data… 1.5.0.7 Dataframes A dataframe stores data! it can hold different kinds of varibales/classes so it is different from a matrix. You cna think of it as a list of varibales that are all the same length. Data frames are probably the most common way we will work with R bone &lt;- c(&quot;humerus&quot;, &quot;radius&quot;, &quot;ulna&quot;, &quot;femur&quot;, &quot;tibia&quot;, &quot;fibula&quot;) size_inches &lt;- c(14.4, 10.4, 11.1, 19.9, 16.9, 15.9) injury &lt;- sample(c(&quot;yes&quot;,&quot;no&quot;),6,replace=TRUE) sample_letter &lt;- LETTERS[1:6] my_sample &lt;- data.frame(bone, size_inches, injury, sample_letter) my_sample ## bone size_inches injury sample_letter ## 1 humerus 14.4 yes A ## 2 radius 10.4 no B ## 3 ulna 11.1 no C ## 4 femur 19.9 no D ## 5 tibia 16.9 yes E ## 6 fibula 15.9 no F If you use the function View you can see a spreadsheet of the data frame you just made View(my_sample) you can view a specifc column/vector using the $ my_sample$bone ## [1] humerus radius ulna femur tibia fibula ## Levels: femur fibula humerus radius tibia ulna a.run the code below. it should show an error. Why? rewrite the code so it works! NOTE: make this appear but not run? #num &lt;- c(1,2,3,4,5) #food &lt;- c(&quot;bread&quot;, &quot;butter&quot;, &quot;milk&quot;, &quot;cheese&quot;,&quot;coffee&quot;, &quot;tea&quot;) #quantity &lt;- c(1,1,3,5,7,1) #shopping &lt;- data.frame(num, food, quantity) what is the class type of the different vectors in the my_sample dataframe? 1.5.0.8 Comparing values Often times we are going to want to compare things. run the code below a &lt;- 5 b &lt;- 9 c &lt;- 7 d &lt;- sqrt(49) Now, figure out how to have R evaluate the following: - is a bigger than b? - is c equal to d (careful with this one..) - is c less than or equal to b? make a new vector called temp with the values of 1,5,7,9,11,14,6,8. then write a single line of code that evalautes if 3 is greater than each of the values in the vector how would you ask R if the 5th value in temp is larger than 5? "],
["now-what.html", "Chapter 2 Now What 2.1 R-basics 2.2 some examples MAYBE PUT THIS IN CHPT 3? 2.3 Things to keep in mind:", " Chapter 2 Now What So, I Downloaded R, Now What unit questions What kinds of data exist within R? What is a command line? How do you write one? 2.1 R-basics There are six basic data types within R: character, numeric (real or decimal), integer, logical or complex. Within these data types are data structures: atomic vectors, lists, matrices, data frames, and factors. R operates on data structures. https://natureofcode.com/book/chapter-1-vectors/ Functions to examine features of vectors and other objects: Class( ) – what kind of object is it? Typeof( ) – what is the object’s data type? Length( ) – how long is the object or vector? 2 dimensional objects? Attributes ( ) – Does the object have any metadata? Assignment: Read https://cran.r-project.org/doc/manuals/r-release/R-intro.pdf chapters 1 &amp; 2 2.2 some examples MAYBE PUT THIS IN CHPT 3? 2.2.1 Ok, but what can we do with this? knitr::kable(head(iris), format = &quot;html&quot;) Sepal.Length Sepal.Width Petal.Length Petal.Width Species 5.1 3.5 1.4 0.2 setosa 4.9 3.0 1.4 0.2 setosa 4.7 3.2 1.3 0.2 setosa 4.6 3.1 1.5 0.2 setosa 5.0 3.6 1.4 0.2 setosa 5.4 3.9 1.7 0.4 setosa 2.2.1.1 you can make snazzy visulazations Need to check where this came from 2.2.2 A motion plot 2.2.3 You can do fun things in presentaions: ## Warning: package &#39;leaflet&#39; was built under R version 3.5.3 2.3 Things to keep in mind: You are going to get frustrated. Learning anything takes time and patience. And often times it isn’t your fault, but the fault of the program for not making it easy to use! I have been using R for 5+ years and still feel like a novice sometimes. Saw background-image: url(https://mitpress.mit.edu/sites/default/files/styles/large_book_cover/http/mitp-content-server.mit.edu%3A18180/books/covers/cover/%3Fcollid%3Dbooks_covers_0%26isbn%3D9780262640374%26type%3D.jpg?itok=GHYRoS0y) "],
["technical-details.html", "Chapter 3 Technical Details 3.1 notes while working on book 3.2 basic R stuff", " Chapter 3 Technical Details 3.1 notes while working on book currently trying different formats used msmbstyle (https://github.com/grimbough/msmbstyle) by installing package via devtools::install_github(“grimbough/msmbstyle”) 3.2 basic R stuff 3.2.1 working with factors If there is one thing we could emphaize it is to pay attention to the class of the cols in the datasets you import. Many errors creep in when R makes an assumption about the class that doesn’t fit how you interpert the data. One issue is factors factors are categorical data. In the old days R used to import any string as a factor. This caused some problems! Now, readr fixes this but we still need to be aware of how factors work. read https://peerj.com/preprints/3163/ and XXXX The following code, taken mostly from http://www.ats.ucla.edu/stat/r/ modules/factor_variables.htm gives a workthough on what factors are and how to think about them. TKAE THIS EXAMPLE AND CHANCE TO BONES run the following code. Note how R thinks the temp object is numeric set.seed(100) #this sets the randomizer so if you run this code you get the same results i did temp &lt;- sample(0:1, 20, replace=T) temp ## [1] 0 0 1 0 0 0 1 0 1 0 1 1 0 0 1 1 0 0 0 1 is.factor(temp) ## [1] FALSE is.numeric(temp) ## [1] TRUE ok, so we now have a list of numbers. Remember that factors are categories. So, we are going to assign factors to these values useing the argument labels temp_f &lt;- factor(temp, labels = c(&quot;femur&quot;, &quot;tibia&quot;)) temp_f #hey, that is kinda cool! lets check if it still numeric ## [1] femur femur tibia femur femur femur tibia femur tibia femur tibia ## [12] tibia femur femur tibia tibia femur femur femur tibia ## Levels: femur tibia is.numeric(temp_f) ## [1] FALSE is.factor(temp_f) #sweet! ## [1] TRUE take a minute and think about what we just did. check out the strcuture of temp_f to see that it still has the intergers there. techincally A factor is an integer vector that has a ‘mapping’ betwen the integers and categorical values that are stored as a level attributre. R displays the values associated with the integers now, what happens if we start with charachets rather than numbers: size &lt;- c(&quot;small&quot;, &quot;medium&quot;, &quot;small&quot;, &quot;small&quot;, &quot;small&quot;, &quot;small&quot;, &quot;medium&quot;, &quot;small&quot;, &quot;medium&quot;, &quot;medium&quot;, &quot;medium&quot;, &quot;medium&quot;, &quot;medium&quot;, &quot;tall&quot;, &quot;tall&quot;, &quot;small&quot;, &quot;medium&quot;, &quot;medium&quot;, &quot;small&quot;, &quot;tall&quot;) is.factor(size) ## [1] FALSE R doesn’t think it is a factor. We have to tell it what’s up size_f &lt;- factor(size) size_f ## [1] small medium small small small small medium small medium medium ## [11] medium medium medium tall tall small medium medium small tall ## Levels: medium small tall when you print the object size_f note that at the bottom it tells you the levels: “Levels: medium small tall” using the help, explore what levels are. in plain language write down what they are? notice the order they are printed in: medium small tall. This is because it is alphabetical. R doesn’t know that it makes more senset to list them like this “small, medium, tall.” Again, we have to tell it! there are a few ways to do this. the following is the base R way. the Tidyverse gives another way too size_f2 &lt;- factor(size, levels=c(&quot;small&quot;, &quot;medium&quot;, &quot;tall&quot;)) levels(size_f2) #woot! ## [1] &quot;small&quot; &quot;medium&quot; &quot;tall&quot; sometimes you might need to use ordinal data. For that we use ordered factors. Ordinal data is when we the order of the values matters, but we can’t say how much of a difference there is between each. The data is ranked but the distance between categories isn’t clear. So, if we are measuring something like job satisifaction hard to say how much better ‘very happy’ is from ‘happy’. size_ordered &lt;- ordered(size, levels =c(&quot;small&quot;, &quot;medium&quot;, &quot;tall&quot;)) size_ordered ## [1] small medium small small small small medium small medium medium ## [11] medium medium medium tall tall small medium medium small tall ## Levels: small &lt; medium &lt; tall table(size_ordered) ## size_ordered ## small medium tall ## 8 9 3 note in size ordered you see arrows in the levels the last thing i want to mention is adding data. now, you might think this is easier to do in excel but remember that R has the plus of perserving all you steps. Plus, this way you aren’t messing with the original data. size_f2[21] &lt;- &quot;very.tall&quot; ## Warning in `[&lt;-.factor`(`*tmp*`, 21, value = &quot;very.tall&quot;): invalid factor ## level, NA generated what do you think this error code means? what do you see when you print the object size_f2 size_f2 &lt;- factor(size_f2, levels = c(levels(size_f2), &quot;very.tall&quot;)) size_f2[21] &lt;- &quot;very.tall&quot; ok, so this is a bit long. but levels is the same. We are cheating a bit by using the levels(size_f2) function to get the original levels from the list. As you get better w/ R you learn these little tricks to help. avoids making mistakes… Lets say we want to remove a level: This could become problem when making images since it may still show up even if we just remove it first, we get rid of the elements we don’t want size_f2_new &lt;- size_f2[size_f2 != &quot;very.tall&quot;] #then, we &#39;refactor&#39; it size_f2_new &lt;- factor(size_f2_new) size_f2_new ## [1] small medium small small small small medium small medium medium ## [11] medium medium medium tall tall small medium medium small tall ## Levels: small medium tall 3.2.2 factors in the tidyverse working in the tidyverse we can use the forcats package to make factors easier to work with. EXAMPLES HERE fct_reorder : reorder factors by another varialne/ very useufl/ fct_relevel : reorder factors manually fct_expand fct_infreq : reorders factors by the frequecny in which they appear. fct_recode: changes the levels fct_colaps: collaps many lekvel into one fct_lump: lumps least common lelves togehter…USEFUL for visulzaions "],
["how-computers-and-r-think.html", "Chapter 4 How Computers (and R) Think 4.1 file/folder management 4.2 file types 4.3 types of files you might see in the wild and what they are 4.4 Accessing internet resources 4.5 refs for this section", " Chapter 4 How Computers (and R) Think What is going on behind the scenes This chapter has a lot of background info on using computers. A lot of this is basically random tips and tricks and info that we’ve picked up over the years, Mostly as non-computer science folks coming across terms and ideas that are basic in the comp-sci world but not in the anthropology world. In other words, this is a repository of things that you might one day care about. As always a work in progress so let us know if something is missing/wrong/needs to be updated etc. 4.1 file/folder management One of the first things you want to start doing to work more efficiently in R (and in general) is to think about how best to manage files and folders. Once you get the hang of R it is easy to get a data set and just dump it into a temp folder to check it out. But this can get messy. This section gives tips on how to name and use file management so that your code is easy to use by co-authors (which could include yourself 2 years from now) 4.1.1 file names In programming it is often a bad idea to have spaces in function names. It also is sometimes difficult to ‘read in’ files with spaces in their names.1 Because of this many times we don’t want spaces in file names. There are a few ways to combine words, however, to make it easy to read Name example Snake case my_new_data Camel case myNewData Kebab case my-new-data Pascal case MyNewData Study question: What are the differences between these four types? Which do you like the best? Choose one and stick with that! It isn’t always easy, but keeping consistent file naming helps in the long run. It also helps to know a bit about how computers organize files. If you want a series of files to be able to be sorted in order a good trick is to label them like this: 01_first 02_second 03_third 04_fourth This allows you to sort the files by name and have them show up in order Thinking question: What are some examples of bad file names? in other words, what would be an example of a file name that wouldn’t help the you understand what is in it As you know @ref(R_basics) {FIX} As you know 2.1 4.1.2 dates Dealing with dates is not easy knitr::include_graphics(&quot;images/iso_8601.png&quot;) The ISO 8601 standard is YYYY-MM-DD. Computers deal with dates in different ways depending upon the operating system. However, in general they rely on system time, which is the amount of time (in seconds or nanoseconds) that have elapsed since a certain day. If you find yourself working with date data it is useful to learn more about this. In chpt XXX we talk a bit about this in terms of how Excel can cause problems with date time fields 4.2 file types A computer file is, in esscene, a string of 1s and 0s. Computers can tell what a file is (is it an image, a text, a video) by the extention, which is the name after the period in a full file name. For example, for the file nyc_temp_data.txt, the “.txt” tells the computer the file is a text file. MAYBE HAVE IMAGE HERE 4.3 types of files you might see in the wild and what they are JSON - JavaScript Object Notation This is common way to store info on webpages it looks like this, with a key and a value: {“name”: “Mary”, “Major”: “Anthropology”} To read JSON files into R you can use the jsonlite package and the fromJSON function.2 EXE - executable file a file that can be run by clicking on it CSV - Comma-separated values This is one of the most common ways to send and receive data. A CSV file is a simple text file that uses commas to deliminate, or separate, values. Such files store numbers and text only. It is useful since anyone can open them and doesn’t require proprietary software. sql - Structured Query Language Used for buidling databases where you might see it: exported data from Filemaker? html zip tar - Tape ARchive tar.gz - Tape ARchive compressed with gzip, a Unix function compressed file that o ften has multiple files stored in a single file iso - contains image that was from an optical disc like a DVD. a copy of everything on that disk You may want to mount the ISO file, which means it gets treated as if you are opening the real disc. you can also burn the ISO file onto an actual DVD Where you might see it: Large files, installing operating systems md - Markdown A file written in any one of several types of Markdown language, which allows someone to write a file in a text document but then convert to another format like HTML or PDF. Where you might see it: GitHub, rmd - R Markdown Markdown file that easily runs R code. Fun fact: this book was written in R Markdown Where you might see it: The chpts of this book 4.4 Accessing internet resources 4.4.1 what is an api An API is a “application programming interface.” For most of what we will use, we can think of it as a a code that lets us access information. we can send a request for the info we want hints for api: load ‘usethis’ run edit_r_environ() add api there see: https://usethis.r-lib.org/articles/articles/usethis-setup.html #accessing/using the terminal #computer languages you might come across Python #terms GUI IDE #useful programs Wox - for PC. lets you open files easy and search a bit #video and images 4.5 refs for this section ( Refs: https://www.tidyverse.org/articles/2017/12/workflow-vs-script/ This is because a space often means something special in computer languages.↩ for more info: https://stackoverflow.com/questions/16947643/getting-imported-json-data-into-a-data-frame↩ "],
["working-with-spreadsheets.html", "Chapter 5 Working with Spreadsheets 5.1 How to best use spreadsheets: 5.2 Types of data used in spreadsheets: 5.3 problems 5.4 Spreadsheet programs", " Chapter 5 Working with Spreadsheets to add: - section on cleaning spreadsheets (or shld that go in chpt 6) Spreadsheets are interactive computer applications for organization, analysis, and storage of data in tabular form. They consist of a table of cells arranged into rows and columns. A cell is simply a box that holds data. Most spreadsheets use a standard convention where columns are are represented by letters, “A”, “B”, “C” and rows are normally represented by numbers, 1, 2, 3,. (image from: https://www.google.com/url?sa=i&amp;source=images&amp;cd=&amp;ved=2ahUKEwjAk6Wd3pnlAhUKKqwKHfnmBAkQjRx6BAgBEAQ&amp;url=https%3A%2F%2Fstablemanagement.com%2Farticles%2Ftips-stable-owners-creating-spreadsheet-54801&amp;psig=AOvVaw1IGNVA8ljGXcio0Vrdvhy8&amp;ust=1571073279950004) In most math and stats courses, we are taught to refer to the row first and then the column. This comes from linear algebra (the standard mnemonic is to remember the word “RailwayCars”, where the R comes before the C). The fact is that you are actually looking at a spreadsheet now! The screen you are reading this on is a sort of spreadsheet, with the ‘cells’ filled with different values. The computer then translated this to color and shade. This is how digital photos etc work. Here is a fun video that talks about how pics on a computer are spreadsheets… https://www.youtube.com/watch?v=UBX2QQHlQ_I In general, spreadsheets are fine for storing data, but not so great for analyzing/visualizing data. The reason for this is that the format we use to record data are often made for ease of use of us rather than for ease of use of stats. One of us once got a spreadsheet where different info was connoted by the spaces within each cell. Trying to export that info into a workable format was not easy (see section 6.XXX for how to do this) The big issue is how can we setup data to be read by both humans and computers? Most people who have used spreadsheet have used Excel. One of the major drawbacks to Excel is its price (for researchers/students in college they can usually get it for free. But as with other examples once you no longer have access it is hard to get it). HOwever, there are many great things about Excel. I recommend this video which teaches a lot of nice tips and tricks: https://www.youtube.com/watch?v=0nbkaYsR94c Excel makes it easy for us to read the data but hard for the computer to read the data. And Excel can also cause some major issues. Follow along the example below (if you have Excel) for an example of what we mean [insert example here from http://ecologybits.com/index.php/2016/07/06/beware-this-scary-thing-excel-can-do-to-your-data/ 5.1 How to best use spreadsheets: Assignment: read Karl W. Broman &amp; Kara H. Woo (2018) Data Organization in Spreadsheets, The American Statistician, 72:1, 2-10, DOI: 10.1080/00031305.2017.1375989 What examples do they give of bad spreadsheets? What makes a spreadsheet good? Assignment: Build a spreadsheet using the tips of Browman &amp; Woo 5.2 Types of data used in spreadsheets: Dates: this is probably one of the largest issues. For example, Excel has 2 different date formats based upon the version of Excel you use. One counts 1900 at the start date and the other counts 1904 (https://support.microsoft.com/en-us/help/214330/differences-between-the-1900-and-the-1904-date-system-in-excel) As we talked about in the “How computers think” section, 4.1.2 dates work by giving a computer a start time and then calculating how long it has been since that start Check: [excel-options-advanced] 5.3 problems Panko (2008) reported that in 13 audits of real-world spreadsheets, an average of 88% contained errors examples:https://bmcbioinformatics.biomedcentral.com/articles/10.1186/1471-2105-5-80 https://www.bloomberg.com/news/articles/2013-04-18/faq-reinhart-rogoff-and-the-excel-error-that-changed-history 5.4 Spreadsheet programs Excel GoogleSheets Numbers LibreOce OnlineCalc Airtable Calligra "],
["working-with-data.html", "Chapter 6 Working with data 6.1 Tidy data 6.2 examples 6.3 getting data into R 6.4 You got the data into R, now what? 6.5 lets look at the primate dataset 6.6 another example", " Chapter 6 Working with data NEEDS A LOT OF EDITS How do we manipulate the data to tell a story How to get data from your collaborators into a format for R… how to organize data 3.how to explore data As we talked about in the previous chapter, most data live in spreadsheets. 6.1 Tidy data [maybe talk about this in the spreadsheet chpt?] Data transformation is the key to R. we are going to take data in from a worksheet/csv/whatever and transform it. There are a number of ways to do this. One method that gives us many options is using a package called dplyr. This is part of a larger group of packages known as the Tidyverse. 6.2 examples data i used from NSF use data from the primate database a few from Tidytuesday so they are introduced to that another anthro dataset 6.3 getting data into R While it has gotten easier over the years to do this, one of the major struggles first-time R users (and seasoned professionals) have is getting data from a file into R. In this section we give a few different methods of doing this. examples: read.csv and read_csv using the ‘import dataset’ button read_xl datapasta etc.. 6.3.1 reading in a CSV file if you are lucky the data sent to you is in a CSV file (see chpt 5 @ref(Working with Spreadsheets)) for tips on what to do if this is not the case). There are XXX ways to do this 6.3.1.1 read.csv vs read_csv vs fread (from data.table) These are very similar functions. The read.csv is part of base R whil read_csv is from the Tidyverse. Most of the differences between the two functions aren’t really useful for us (see XXXX for details) but there are two things to mention. One is that unlike read.csv, read_csv doesn’t automatically imports strings as factors. This might be useful since the assumption that strings should be factors has a bit of history attached to it . Moreover, read_csv seems to do a better job of ‘guessing’ the type of data in each column. It parses the cols and puts them in the data type that it guesses they should be in read_csv also tells you what it parsed each col as. fread has the nice output that it tells you had big the file is read_csv will import the data as a tibble vs as a dataframe so keep that in mind. It is also faster than read.csv, while fread seems to be the fastest overall As with anything, people disagree about this. honestly you caa get bogged down in this or just pick one and learn that one. and if you need a different method know it exists. also, keep in mind that there are other types of data you can read in with these. examples: library(tidyverse) ## Warning: package &#39;tidyverse&#39; was built under R version 3.5.3 ## -- Attaching packages ----------------------------------------------------- tidyverse 1.2.1 -- ## v ggplot2 3.1.0 v purrr 0.3.2 ## v tibble 2.1.3 v dplyr 0.8.1 ## v tidyr 0.8.3 v stringr 1.4.0 ## v readr 1.3.1 v forcats 0.3.0 ## Warning: package &#39;ggplot2&#39; was built under R version 3.5.2 ## Warning: package &#39;tibble&#39; was built under R version 3.5.3 ## Warning: package &#39;tidyr&#39; was built under R version 3.5.3 ## Warning: package &#39;readr&#39; was built under R version 3.5.2 ## Warning: package &#39;purrr&#39; was built under R version 3.5.3 ## Warning: package &#39;dplyr&#39; was built under R version 3.5.3 ## Warning: package &#39;stringr&#39; was built under R version 3.5.2 ## -- Conflicts -------------------------------------------------------- tidyverse_conflicts() -- ## x dplyr::filter() masks stats::filter() ## x dplyr::lag() masks stats::lag() library(data.table) ## ## Attaching package: &#39;data.table&#39; ## The following objects are masked from &#39;package:dplyr&#39;: ## ## between, first, last ## The following object is masked from &#39;package:purrr&#39;: ## ## transpose body_mass_base &lt;- read.csv(&quot;https://zenodo.org/record/2600338/files/BodyMass.csv&quot;) body_mass_tidy &lt;- read_csv(&quot;https://zenodo.org/record/2600338/files/BodyMass.csv&quot;) ## Parsed with column specification: ## cols( ## Family = col_character(), ## Genus = col_character(), ## CommonName = col_character(), ## Species = col_character(), ## `Species (ITIS)` = col_character(), ## BodyMass_kg = col_double(), ## BodyMassMale_kg = col_double(), ## BodyMassFemale_kg = col_double(), ## Refs1 = col_character() ## ) body_mass_datatable &lt;- fread(&quot;https://zenodo.org/record/2600338/files/BodyMass.csv&quot;) look at each of the objects imported above. compare them with str function. What differences do you see? If you are using Rstudio there is another way to do this. if you look at the enviotnment pane you will see an ‘import dataset’ button (next to the little broom). clicking that gives you a point-and-click interface that will generate the function calls to read in various datasets using the button play around with the various options in readr and see what you can find out. HOw can you change the way readr parses a speicfic col? 6.3.2 reading in a Excel file How to import/ a dataset from Excel into R: I. Open Excel data a. File/ Save As/ Name/ *Before clicking save, make sure to change the file format to Comma Delimited Text and better set the directory to My Documents folder, for Windows b. When Saved, this file will have a name Data.csv. II Now Open R and run a. MyRData &lt;- read.csv(“Data.csv”, header = TRUE) i. The argument header= TRUE tells R that the first row of the data labels of every column 1. If set to FALSE then the first row of the data are not labels but are considered as data points b. If data is saved in Text (.txt) format, use the read.table function i. Run MyRData2 &lt;- read.table(“Data1.text”, header = TRUE) read_xl 6.3.3 Datapasta 6.3.4 cleaning the data once it is in R sometimes the col heads are messy. the wonderful janitor package comes in useful here home_range &lt;- read_csv(&quot;https://zenodo.org/record/2600338/files/HomeRange.csv&quot;) ## Parsed with column specification: ## cols( ## Family = col_character(), ## Genus = col_character(), ## CommonName = col_character(), ## Species = col_character(), ## `Species (ITIS)` = col_character(), ## HomeRange_ha = col_double(), ## Low_range = col_character(), ## High_range = col_character(), ## N_groups = col_character(), ## Mean_individuals = col_character(), ## Method = col_character(), ## Alternative_HomeRange_ha = col_character(), ## Alternative_HomeRange_method = col_character(), ## Study_duration_months = col_character(), ## Refs = col_double() ## ) home_range_clean &lt;- janitor::clean_names(home_range) How does home_range differ from home_range_clean? look at the online help for the Janitor package and figure out what other functions it has? how would you find duplicate rows of data? 6.4 You got the data into R, now what? Once you get data into R the question becomes what to do with it. EDA when doing EDA we need to be careful. as you ‘explore’ data you are also affecting your view of it. for example as we look at the dataset we may play around and start to see patterns. these patterns might be there because we choose to look for patterns and not becuse they are real..good practice is to take a ‘training set’ of your data and explore that. Or use a dataset that you aren’t studying to learn 6.5 lets look at the primate dataset This comes from XXXXXX 6.5.1 viewing the data home_range &lt;- read_csv(&quot;https://zenodo.org/record/2600338/files/HomeRange.csv&quot;) ## Parsed with column specification: ## cols( ## Family = col_character(), ## Genus = col_character(), ## CommonName = col_character(), ## Species = col_character(), ## `Species (ITIS)` = col_character(), ## HomeRange_ha = col_double(), ## Low_range = col_character(), ## High_range = col_character(), ## N_groups = col_character(), ## Mean_individuals = col_character(), ## Method = col_character(), ## Alternative_HomeRange_ha = col_character(), ## Alternative_HomeRange_method = col_character(), ## Study_duration_months = col_character(), ## Refs = col_double() ## ) we can explore the data that is in R with different functions. just enter the name of the object spits out some info home_range ## # A tibble: 748 x 15 ## Family Genus CommonName Species `Species (ITIS)` HomeRange_ha Low_range ## &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; &lt;chr&gt; ## 1 Cerco~ Alle~ Allen_s_S~ Alleno~ Allenopithecus_~ NA &lt;NA&gt; ## 2 Cheir~ Allo~ Hairy_ear~ Alloce~ Allocebus_trich~ 25.8 16 ## 3 Cerco~ Allo~ L_Hoest_s~ Alloch~ Allochrocebus_l~ 117. NI ## 4 Cerco~ Allo~ L_Hoest_s~ Alloch~ Allochrocebus_l~ 61.3 51.81 ## 5 Cerco~ Allo~ Preuss_s_~ Alloch~ Allochrocebus_p~ NA &lt;NA&gt; ## 6 Cerco~ Allo~ Sun_taile~ Alloch~ Allochrocebus_s~ NA &lt;NA&gt; ## 7 Ateli~ Alou~ Ursine_Re~ Alouat~ Alouatta_arctoi~ 7.52 NI ## 8 Ateli~ Alou~ Ursine_Re~ Alouat~ Alouatta_arctoi~ 14.5 4 ## 9 Ateli~ Alou~ Ursine_Re~ Alouat~ Alouatta_arctoi~ 5.5 4 ## 10 Ateli~ Alou~ Red_hande~ Alouat~ Alouatta_belzeb~ 7.12 4.75 ## # ... with 738 more rows, and 8 more variables: High_range &lt;chr&gt;, ## # N_groups &lt;chr&gt;, Mean_individuals &lt;chr&gt;, Method &lt;chr&gt;, ## # Alternative_HomeRange_ha &lt;chr&gt;, Alternative_HomeRange_method &lt;chr&gt;, ## # Study_duration_months &lt;chr&gt;, Refs &lt;dbl&gt; print(home_range) ## # A tibble: 748 x 15 ## Family Genus CommonName Species `Species (ITIS)` HomeRange_ha Low_range ## &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; &lt;chr&gt; ## 1 Cerco~ Alle~ Allen_s_S~ Alleno~ Allenopithecus_~ NA &lt;NA&gt; ## 2 Cheir~ Allo~ Hairy_ear~ Alloce~ Allocebus_trich~ 25.8 16 ## 3 Cerco~ Allo~ L_Hoest_s~ Alloch~ Allochrocebus_l~ 117. NI ## 4 Cerco~ Allo~ L_Hoest_s~ Alloch~ Allochrocebus_l~ 61.3 51.81 ## 5 Cerco~ Allo~ Preuss_s_~ Alloch~ Allochrocebus_p~ NA &lt;NA&gt; ## 6 Cerco~ Allo~ Sun_taile~ Alloch~ Allochrocebus_s~ NA &lt;NA&gt; ## 7 Ateli~ Alou~ Ursine_Re~ Alouat~ Alouatta_arctoi~ 7.52 NI ## 8 Ateli~ Alou~ Ursine_Re~ Alouat~ Alouatta_arctoi~ 14.5 4 ## 9 Ateli~ Alou~ Ursine_Re~ Alouat~ Alouatta_arctoi~ 5.5 4 ## 10 Ateli~ Alou~ Red_hande~ Alouat~ Alouatta_belzeb~ 7.12 4.75 ## # ... with 738 more rows, and 8 more variables: High_range &lt;chr&gt;, ## # N_groups &lt;chr&gt;, Mean_individuals &lt;chr&gt;, Method &lt;chr&gt;, ## # Alternative_HomeRange_ha &lt;chr&gt;, Alternative_HomeRange_method &lt;chr&gt;, ## # Study_duration_months &lt;chr&gt;, Refs &lt;dbl&gt; notes a couple of things about the output in the console. it might not all fit on the screen if you scroll to the top you see that it is a ‘tibble’ that is 748 x 15. This means there are 748 rows and 15 columns FIND ANOTHER DATASET &gt; how many observatiosn are ther &gt; How many variables? If you want to see just the first few rows use head head(home_range) ## # A tibble: 6 x 15 ## Family Genus CommonName Species `Species (ITIS)` HomeRange_ha Low_range ## &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; &lt;chr&gt; ## 1 Cerco~ Alle~ Allen_s_S~ Alleno~ Allenopithecus_~ NA &lt;NA&gt; ## 2 Cheir~ Allo~ Hairy_ear~ Alloce~ Allocebus_trich~ 25.8 16 ## 3 Cerco~ Allo~ L_Hoest_s~ Alloch~ Allochrocebus_l~ 117. NI ## 4 Cerco~ Allo~ L_Hoest_s~ Alloch~ Allochrocebus_l~ 61.3 51.81 ## 5 Cerco~ Allo~ Preuss_s_~ Alloch~ Allochrocebus_p~ NA &lt;NA&gt; ## 6 Cerco~ Allo~ Sun_taile~ Alloch~ Allochrocebus_s~ NA &lt;NA&gt; ## # ... with 8 more variables: High_range &lt;chr&gt;, N_groups &lt;chr&gt;, ## # Mean_individuals &lt;chr&gt;, Method &lt;chr&gt;, Alternative_HomeRange_ha &lt;chr&gt;, ## # Alternative_HomeRange_method &lt;chr&gt;, Study_duration_months &lt;chr&gt;, ## # Refs &lt;dbl&gt; tail(home_range) ## # A tibble: 6 x 15 ## Family Genus CommonName Species `Species (ITIS)` HomeRange_ha Low_range ## &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; &lt;chr&gt; ## 1 Cerco~ Trac~ Selangor_~ Trachy~ Trachypithecus_~ 31.5 NI ## 2 Cerco~ Trac~ Shortridg~ Trachy~ Trachypithecus_~ NA &lt;NA&gt; ## 3 Lemur~ Vare~ Red_Ruffe~ Vareci~ Varecia_rubra 24.6 23.3 ## 4 Lemur~ Vare~ Red_Ruffe~ Vareci~ Varecia_rubra 10.5 5.42 ## 5 Lemur~ Vare~ Black_and~ Vareci~ Varecia_variega~ 117. 100 ## 6 Lemur~ Vare~ Black_and~ Vareci~ Varecia_variega~ 139 NI ## # ... with 8 more variables: High_range &lt;chr&gt;, N_groups &lt;chr&gt;, ## # Mean_individuals &lt;chr&gt;, Method &lt;chr&gt;, Alternative_HomeRange_ha &lt;chr&gt;, ## # Alternative_HomeRange_method &lt;chr&gt;, Study_duration_months &lt;chr&gt;, ## # Refs &lt;dbl&gt; You can also use the built-in dataviwer with the View function. this makes a spreadsheet that you can quickly explore View(home_range) finally, if the data is a tibble you can use glimpse glimpse(home_range) ## Observations: 748 ## Variables: 15 ## $ Family &lt;chr&gt; &quot;Cercopithecidae&quot;, &quot;Cheirogaleida... ## $ Genus &lt;chr&gt; &quot;Allenopithecus&quot;, &quot;Allocebus&quot;, &quot;A... ## $ CommonName &lt;chr&gt; &quot;Allen_s_Swamp_Monkey&quot;, &quot;Hairy_ea... ## $ Species &lt;chr&gt; &quot;Allenopithecus_nigroviridis&quot;, &quot;A... ## $ `Species (ITIS)` &lt;chr&gt; &quot;Allenopithecus_nigroviridis&quot;, &quot;A... ## $ HomeRange_ha &lt;dbl&gt; NA, 25.750, 116.600, 61.325, NA, ... ## $ Low_range &lt;chr&gt; NA, &quot;16&quot;, &quot;NI&quot;, &quot;51.81&quot;, NA, NA, ... ## $ High_range &lt;chr&gt; NA, &quot;35.5&quot;, &quot;NI&quot;, &quot;70.84&quot;, NA, NA... ## $ N_groups &lt;chr&gt; NA, &quot;2&quot;, &quot;NI&quot;, &quot;2&quot;, NA, NA, &quot;NI&quot;,... ## $ Mean_individuals &lt;chr&gt; NA, &quot;3&quot;, &quot;NI&quot;, &quot;27&quot;, NA, NA, &quot;NI&quot;... ## $ Method &lt;chr&gt; NA, &quot;Minimum convex polygon&quot;, &quot;NI... ## $ Alternative_HomeRange_ha &lt;chr&gt; NA, &quot;10.4&quot;, &quot;NI&quot;, &quot;75.5&quot;, NA, NA,... ## $ Alternative_HomeRange_method &lt;chr&gt; NA, &quot;Kernel density estimators&quot;, ... ## $ Study_duration_months &lt;chr&gt; NA, &quot;8&quot;, &quot;NI&quot;, &quot;11&quot;, NA, NA, &quot;NI&quot;... ## $ Refs &lt;dbl&gt; NA, 373, 1174, 245, NA, NA, 381, ... what differences exist betwen print and glimpse 6.5.2 exploring the data Much of this usse the dplyr package which is part of the tidyverse. We also show how to use the data.tables pacakge as well. As its authors point out, a good way to think of dplyr is in terms of verbs. the verbs do things to the object 6.5.2.1 count this function provides a count by varibale count(home_range, Family) ## # A tibble: 17 x 2 ## Family n ## &lt;chr&gt; &lt;int&gt; ## 1 &lt;NA&gt; 2 ## 2 Aotidae 13 ## 3 Atelidae 54 ## 4 Callitrichidae 86 ## 5 Cebidae 41 ## 6 Cercopithecidae 228 ## 7 Cheirogaleidae 45 ## 8 Daubentoniidae 1 ## 9 Galagidae 32 ## 10 Hominidae 13 ## 11 Hylobatidae 30 ## 12 Indriidae 26 ## 13 Lemuridae 38 ## 14 Lepilemuridae 29 ## 15 Lorisidae 19 ## 16 Pitheciidae 76 ## 17 Tarsiidae 15 look at the help for count and figure out how to make it order the output from large to small add_count adds a new col at the end of the dataframe with these data add_count(home_range, Family, name = &quot;family_count&quot;) ## # A tibble: 748 x 16 ## Family Genus CommonName Species `Species (ITIS)` HomeRange_ha Low_range ## &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; &lt;chr&gt; ## 1 Cerco~ Alle~ Allen_s_S~ Alleno~ Allenopithecus_~ NA &lt;NA&gt; ## 2 Cheir~ Allo~ Hairy_ear~ Alloce~ Allocebus_trich~ 25.8 16 ## 3 Cerco~ Allo~ L_Hoest_s~ Alloch~ Allochrocebus_l~ 117. NI ## 4 Cerco~ Allo~ L_Hoest_s~ Alloch~ Allochrocebus_l~ 61.3 51.81 ## 5 Cerco~ Allo~ Preuss_s_~ Alloch~ Allochrocebus_p~ NA &lt;NA&gt; ## 6 Cerco~ Allo~ Sun_taile~ Alloch~ Allochrocebus_s~ NA &lt;NA&gt; ## 7 Ateli~ Alou~ Ursine_Re~ Alouat~ Alouatta_arctoi~ 7.52 NI ## 8 Ateli~ Alou~ Ursine_Re~ Alouat~ Alouatta_arctoi~ 14.5 4 ## 9 Ateli~ Alou~ Ursine_Re~ Alouat~ Alouatta_arctoi~ 5.5 4 ## 10 Ateli~ Alou~ Red_hande~ Alouat~ Alouatta_belzeb~ 7.12 4.75 ## # ... with 738 more rows, and 9 more variables: High_range &lt;chr&gt;, ## # N_groups &lt;chr&gt;, Mean_individuals &lt;chr&gt;, Method &lt;chr&gt;, ## # Alternative_HomeRange_ha &lt;chr&gt;, Alternative_HomeRange_method &lt;chr&gt;, ## # Study_duration_months &lt;chr&gt;, Refs &lt;dbl&gt;, family_count &lt;int&gt; Count is a great way to start exploring your dataset. One nice way to make complex code easier to read is to chain arguments togehter w/ the “%&gt;%” symobl. This comes from the AAAAAA pacakage and also is loaded when you load the tidyverse. the %&gt;% can be read as “then” so the same code to get the counts of Famlies can be done like this home_range %&gt;% count(Family, sort = T) ## # A tibble: 17 x 2 ## Family n ## &lt;chr&gt; &lt;int&gt; ## 1 Cercopithecidae 228 ## 2 Callitrichidae 86 ## 3 Pitheciidae 76 ## 4 Atelidae 54 ## 5 Cheirogaleidae 45 ## 6 Cebidae 41 ## 7 Lemuridae 38 ## 8 Galagidae 32 ## 9 Hylobatidae 30 ## 10 Lepilemuridae 29 ## 11 Indriidae 26 ## 12 Lorisidae 19 ## 13 Tarsiidae 15 ## 14 Aotidae 13 ## 15 Hominidae 13 ## 16 &lt;NA&gt; 2 ## 17 Daubentoniidae 1 This is sometimes easier when you have a long code and want to make it readable 6.5.2.2 Filter this function searches for rows that match the arguement. For example, lets say you want all the speices in the genus Allenopithecus note the == rather than = filter(home_range, Genus == &quot;Macaca&quot;) ## # A tibble: 38 x 15 ## Family Genus CommonName Species `Species (ITIS)` HomeRange_ha Low_range ## &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; &lt;chr&gt; ## 1 Cerco~ Maca~ Stump_tai~ Macaca~ Macaca_arctoides 462. NI ## 2 Cerco~ Maca~ Assamese_~ Macaca~ Macaca_assamens~ 434. 352 ## 3 Cerco~ Maca~ Assamese_~ Macaca~ Macaca_assamens~ 208. 65.6 ## 4 Cerco~ Maca~ Assamese_~ Macaca~ Macaca_assamens~ 59 53 ## 5 Cerco~ Maca~ Taiwanese~ Macaca~ Macaca_cyclopis 120 NI ## 6 Cerco~ Maca~ Taiwanese~ Macaca~ Macaca_cyclopis 200 NI ## 7 Cerco~ Maca~ Taiwanese~ Macaca~ Macaca_cyclopis 97 NI ## 8 Cerco~ Maca~ Long_tail~ Macaca~ Macaca_fascicul~ 157 14 ## 9 Cerco~ Maca~ Japanese_~ Macaca~ Macaca_fuscata 24.0 3.9 ## 10 Cerco~ Maca~ Japanese_~ Macaca~ Macaca_fuscata 366 NI ## # ... with 28 more rows, and 8 more variables: High_range &lt;chr&gt;, ## # N_groups &lt;chr&gt;, Mean_individuals &lt;chr&gt;, Method &lt;chr&gt;, ## # Alternative_HomeRange_ha &lt;chr&gt;, Alternative_HomeRange_method &lt;chr&gt;, ## # Study_duration_months &lt;chr&gt;, Refs &lt;dbl&gt; #or home_range %&gt;% filter(Genus == &quot;Macaca&quot;) ## # A tibble: 38 x 15 ## Family Genus CommonName Species `Species (ITIS)` HomeRange_ha Low_range ## &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; &lt;chr&gt; ## 1 Cerco~ Maca~ Stump_tai~ Macaca~ Macaca_arctoides 462. NI ## 2 Cerco~ Maca~ Assamese_~ Macaca~ Macaca_assamens~ 434. 352 ## 3 Cerco~ Maca~ Assamese_~ Macaca~ Macaca_assamens~ 208. 65.6 ## 4 Cerco~ Maca~ Assamese_~ Macaca~ Macaca_assamens~ 59 53 ## 5 Cerco~ Maca~ Taiwanese~ Macaca~ Macaca_cyclopis 120 NI ## 6 Cerco~ Maca~ Taiwanese~ Macaca~ Macaca_cyclopis 200 NI ## 7 Cerco~ Maca~ Taiwanese~ Macaca~ Macaca_cyclopis 97 NI ## 8 Cerco~ Maca~ Long_tail~ Macaca~ Macaca_fascicul~ 157 14 ## 9 Cerco~ Maca~ Japanese_~ Macaca~ Macaca_fuscata 24.0 3.9 ## 10 Cerco~ Maca~ Japanese_~ Macaca~ Macaca_fuscata 366 NI ## # ... with 28 more rows, and 8 more variables: High_range &lt;chr&gt;, ## # N_groups &lt;chr&gt;, Mean_individuals &lt;chr&gt;, Method &lt;chr&gt;, ## # Alternative_HomeRange_ha &lt;chr&gt;, Alternative_HomeRange_method &lt;chr&gt;, ## # Study_duration_months &lt;chr&gt;, Refs &lt;dbl&gt; You can do more complex filters too: lets say you want two genra filter(home_range, Genus == &quot;Macaca&quot; | Genus == &quot;Allochrocebus&quot;) ## # A tibble: 42 x 15 ## Family Genus CommonName Species `Species (ITIS)` HomeRange_ha Low_range ## &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; &lt;chr&gt; ## 1 Cerco~ Allo~ L_Hoest_s~ Alloch~ Allochrocebus_l~ 117. NI ## 2 Cerco~ Allo~ L_Hoest_s~ Alloch~ Allochrocebus_l~ 61.3 51.81 ## 3 Cerco~ Allo~ Preuss_s_~ Alloch~ Allochrocebus_p~ NA &lt;NA&gt; ## 4 Cerco~ Allo~ Sun_taile~ Alloch~ Allochrocebus_s~ NA &lt;NA&gt; ## 5 Cerco~ Maca~ Stump_tai~ Macaca~ Macaca_arctoides 462. NI ## 6 Cerco~ Maca~ Assamese_~ Macaca~ Macaca_assamens~ 434. 352 ## 7 Cerco~ Maca~ Assamese_~ Macaca~ Macaca_assamens~ 208. 65.6 ## 8 Cerco~ Maca~ Assamese_~ Macaca~ Macaca_assamens~ 59 53 ## 9 Cerco~ Maca~ Taiwanese~ Macaca~ Macaca_cyclopis 120 NI ## 10 Cerco~ Maca~ Taiwanese~ Macaca~ Macaca_cyclopis 200 NI ## # ... with 32 more rows, and 8 more variables: High_range &lt;chr&gt;, ## # N_groups &lt;chr&gt;, Mean_individuals &lt;chr&gt;, Method &lt;chr&gt;, ## # Alternative_HomeRange_ha &lt;chr&gt;, Alternative_HomeRange_method &lt;chr&gt;, ## # Study_duration_months &lt;chr&gt;, Refs &lt;dbl&gt; or you want to match two varibales filter(home_range, Genus == &quot;Macaca&quot; &amp; N_groups == 2) ## # A tibble: 4 x 15 ## Family Genus CommonName Species `Species (ITIS)` HomeRange_ha Low_range ## &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; &lt;chr&gt; ## 1 Cerco~ Maca~ Assamese_~ Macaca~ Macaca_assamens~ 208. 65.6 ## 2 Cerco~ Maca~ Assamese_~ Macaca~ Macaca_assamens~ 59 53 ## 3 Cerco~ Maca~ Rhesus_Ma~ Macaca~ Macaca_mulatta 83 1 ## 4 Cerco~ Maca~ Tonkean_M~ Macaca~ Macaca_tonkeana 105. 66.75 ## # ... with 8 more variables: High_range &lt;chr&gt;, N_groups &lt;chr&gt;, ## # Mean_individuals &lt;chr&gt;, Method &lt;chr&gt;, Alternative_HomeRange_ha &lt;chr&gt;, ## # Alternative_HomeRange_method &lt;chr&gt;, Study_duration_months &lt;chr&gt;, ## # Refs &lt;dbl&gt; how would you find HomeRange_ha greater than 75 and then save that to a new dataset. look at the dplyr help to figure this out over75 &lt;- filter(home_range, HomeRange_ha &gt; 75) 6.5.2.3 Select this verb searches the dataframe and only returns cols that you ask for. For example. lets say i just want the speceis and home range home_range %&gt;% select(Species, HomeRange_ha) ## # A tibble: 748 x 2 ## Species HomeRange_ha ## &lt;chr&gt; &lt;dbl&gt; ## 1 Allenopithecus_nigroviridis NA ## 2 Allocebus_trichotis 25.8 ## 3 Allochrocebus_lhoesti 117. ## 4 Allochrocebus_lhoesti 61.3 ## 5 Allochrocebus_preussi NA ## 6 Allochrocebus_solatus NA ## 7 Alouatta_arctoidea 7.52 ## 8 Alouatta_arctoidea 14.5 ## 9 Alouatta_arctoidea 5.5 ## 10 Alouatta_belzebul 7.12 ## # ... with 738 more rows This is useful when you want to look at only some things select has a lot of arguments. HOw would you select all the cols that habe the startes with the prefix “Alt” YOu can also chain verbs together home_range %&gt;% filter(Genus == &quot;Macaca&quot;) %&gt;% select(Species) ## # A tibble: 38 x 1 ## Species ## &lt;chr&gt; ## 1 Macaca_arctoides ## 2 Macaca_assamensis ## 3 Macaca_assamensis ## 4 Macaca_assamensis ## 5 Macaca_cyclopis ## 6 Macaca_cyclopis ## 7 Macaca_cyclopis ## 8 Macaca_fascicularis ## 9 Macaca_fuscata ## 10 Macaca_fuscata ## # ... with 28 more rows 6.5.2.4 arrange this sorts the data home_range %&gt;% arrange(HomeRange_ha) ## # A tibble: 748 x 15 ## Family Genus CommonName Species `Species (ITIS)` HomeRange_ha Low_range ## &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; &lt;chr&gt; ## 1 Lepil~ Lepi~ Weasel_Sp~ Lepile~ Lepilemur_muste~ 0.3 NI ## 2 Lepil~ Lepi~ Petter_s_~ Lepile~ Lepilemur_pette~ 0.3 NI ## 3 Cheir~ Micr~ Gray_brow~ Microc~ Microcebus_gris~ 0.3 NI ## 4 Calli~ Cebu~ Pygmy_Mar~ Cebuel~ Cebuella_pygmaea 0.34 NI ## 5 Cheir~ Micr~ Goodman_s~ Microc~ Microcebus_lehi~ 0.35 0.1 ## 6 Lepil~ Lepi~ White_foo~ Lepile~ Lepilemur_leuco~ 0.5 NI ## 7 Lepil~ Lepi~ Small_too~ Lepile~ Lepilemur_micro~ 0.5 NI ## 8 Cheir~ Micr~ Golden_br~ Microc~ Microcebus_rave~ 0.570 0.54 ## 9 Cheir~ Micr~ Gray_brow~ Microc~ Microcebus_gris~ 0.66 0.43 ## 10 Lepil~ Lepi~ Sahafary_~ Lepile~ Lepilemur_septe~ 0.7 NI ## # ... with 738 more rows, and 8 more variables: High_range &lt;chr&gt;, ## # N_groups &lt;chr&gt;, Mean_individuals &lt;chr&gt;, Method &lt;chr&gt;, ## # Alternative_HomeRange_ha &lt;chr&gt;, Alternative_HomeRange_method &lt;chr&gt;, ## # Study_duration_months &lt;chr&gt;, Refs &lt;dbl&gt; if you put a minus sign in from of the variable it will organiz in descnein order home_range %&gt;% arrange(-HomeRange_ha) ## # A tibble: 748 x 15 ## Family Genus CommonName Species `Species (ITIS)` HomeRange_ha Low_range ## &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; &lt;chr&gt; ## 1 Cerco~ Mand~ Mandrill Mandri~ Mandrillus_sphi~ 18147 NI ## 2 Cerco~ Semn~ Malabar_S~ Semnop~ Semnopithecus_h~ 12328 NI ## 3 Cerco~ Semn~ Nepal_Sac~ Semnop~ Semnopithecus_s~ 6987 NI ## 4 Cerco~ Eryt~ Patas_Mon~ Erythr~ Erythrocebus_pa~ 5200 NI ## 5 Cerco~ Papio Olive_Bab~ Papio_~ Papio_anubis 4357 NI ## 6 Cerco~ Mand~ Mandrill Mandri~ Mandrillus_sphi~ 4000 NI ## 7 Homin~ Pan Bonobo Pan_pa~ Pan_paniscus 4000 2200 ## 8 Cerco~ Rhin~ Guizhou_S~ Rhinop~ Rhinopithecus_b~ 3450 NI ## 9 Cerco~ Papio Guinea_Ba~ Papio_~ Papio_papio 3250 2000 ## 10 Homin~ Gori~ Eastern_G~ Gorill~ Gorilla_beringei 3060 2110 ## # ... with 738 more rows, and 8 more variables: High_range &lt;chr&gt;, ## # N_groups &lt;chr&gt;, Mean_individuals &lt;chr&gt;, Method &lt;chr&gt;, ## # Alternative_HomeRange_ha &lt;chr&gt;, Alternative_HomeRange_method &lt;chr&gt;, ## # Study_duration_months &lt;chr&gt;, Refs &lt;dbl&gt; #or home_range %&gt;% arrange(desc(HomeRange_ha)) ## # A tibble: 748 x 15 ## Family Genus CommonName Species `Species (ITIS)` HomeRange_ha Low_range ## &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; &lt;chr&gt; ## 1 Cerco~ Mand~ Mandrill Mandri~ Mandrillus_sphi~ 18147 NI ## 2 Cerco~ Semn~ Malabar_S~ Semnop~ Semnopithecus_h~ 12328 NI ## 3 Cerco~ Semn~ Nepal_Sac~ Semnop~ Semnopithecus_s~ 6987 NI ## 4 Cerco~ Eryt~ Patas_Mon~ Erythr~ Erythrocebus_pa~ 5200 NI ## 5 Cerco~ Papio Olive_Bab~ Papio_~ Papio_anubis 4357 NI ## 6 Cerco~ Mand~ Mandrill Mandri~ Mandrillus_sphi~ 4000 NI ## 7 Homin~ Pan Bonobo Pan_pa~ Pan_paniscus 4000 2200 ## 8 Cerco~ Rhin~ Guizhou_S~ Rhinop~ Rhinopithecus_b~ 3450 NI ## 9 Cerco~ Papio Guinea_Ba~ Papio_~ Papio_papio 3250 2000 ## 10 Homin~ Gori~ Eastern_G~ Gorill~ Gorilla_beringei 3060 2110 ## # ... with 738 more rows, and 8 more variables: High_range &lt;chr&gt;, ## # N_groups &lt;chr&gt;, Mean_individuals &lt;chr&gt;, Method &lt;chr&gt;, ## # Alternative_HomeRange_ha &lt;chr&gt;, Alternative_HomeRange_method &lt;chr&gt;, ## # Study_duration_months &lt;chr&gt;, Refs &lt;dbl&gt; 6.5.2.5 mutate This is a powerhouse and one that you will probably use a lot. it is simialr to some of the stuff you might do in Excel 6.6 another example squirrel_raw &lt;- read_csv(&quot;datasets/2018_Central_Park_Squirrel_Census_-_Squirrel_Data (1).csv&quot;) ## Parsed with column specification: ## cols( ## .default = col_character(), ## X = col_double(), ## Y = col_double(), ## Date = col_double(), ## `Hectare Squirrel Number` = col_double(), ## Running = col_logical(), ## Chasing = col_logical(), ## Climbing = col_logical(), ## Eating = col_logical(), ## Foraging = col_logical(), ## Kuks = col_logical(), ## Quaas = col_logical(), ## Moans = col_logical(), ## `Tail flags` = col_logical(), ## `Tail twitches` = col_logical(), ## Approaches = col_logical(), ## Indifferent = col_logical(), ## `Runs from` = col_logical(), ## `Zip Codes` = col_double(), ## `Community Districts` = col_double(), ## `Borough Boundaries` = col_double() ## # ... with 2 more columns ## ) ## See spec(...) for full column specifications. squirrel &lt;- squirrel_raw %&gt;% janitor::clean_names() squirrel %&gt;% count(date, sort=T) ## # A tibble: 11 x 2 ## date n ## &lt;dbl&gt; &lt;int&gt; ## 1 10132018 434 ## 2 10072018 405 ## 3 10142018 368 ## 4 10062018 337 ## 5 10102018 335 ## 6 10082018 285 ## 7 10122018 218 ## 8 10172018 216 ## 9 10182018 200 ## 10 10192018 158 ## 11 10202018 67 library(lubridate) ## ## Attaching package: &#39;lubridate&#39; ## The following objects are masked from &#39;package:data.table&#39;: ## ## hour, isoweek, mday, minute, month, quarter, second, wday, ## week, yday, year ## The following object is masked from &#39;package:base&#39;: ## ## date squirrel %&gt;% mutate(parsed_date = mdy(date)) ## # A tibble: 3,023 x 36 ## x y unique_squirrel~ hectare shift date hectare_squirre~ age ## &lt;dbl&gt; &lt;dbl&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;chr&gt; ## 1 -74.0 40.8 13A-PM-1014-04 13A PM 1.01e7 4 &lt;NA&gt; ## 2 -74.0 40.8 15F-PM-1010-06 15F PM 1.01e7 6 Adult ## 3 -74.0 40.8 19C-PM-1018-02 19C PM 1.02e7 2 Adult ## 4 -74.0 40.8 21B-AM-1019-04 21B AM 1.02e7 4 &lt;NA&gt; ## 5 -74.0 40.8 23A-AM-1018-02 23A AM 1.02e7 2 Juve~ ## 6 -74.0 40.8 38H-PM-1012-01 38H PM 1.01e7 1 Adult ## 7 -74.0 40.8 3D-AM-1006-06 03D AM 1.01e7 6 &lt;NA&gt; ## 8 -74.0 40.8 42C-AM-1007-02 42C AM 1.01e7 2 &lt;NA&gt; ## 9 -74.0 40.8 9A-PM-1010-02 09A PM 1.01e7 2 Adult ## 10 -74.0 40.8 9B-AM-1010-04 09B AM 1.01e7 4 &lt;NA&gt; ## # ... with 3,013 more rows, and 28 more variables: ## # primary_fur_color &lt;chr&gt;, highlight_fur_color &lt;chr&gt;, ## # combination_of_primary_and_highlight_color &lt;chr&gt;, color_notes &lt;chr&gt;, ## # location &lt;chr&gt;, above_ground_sighter_measurement &lt;chr&gt;, ## # specific_location &lt;chr&gt;, running &lt;lgl&gt;, chasing &lt;lgl&gt;, climbing &lt;lgl&gt;, ## # eating &lt;lgl&gt;, foraging &lt;lgl&gt;, other_activities &lt;chr&gt;, kuks &lt;lgl&gt;, ## # quaas &lt;lgl&gt;, moans &lt;lgl&gt;, tail_flags &lt;lgl&gt;, tail_twitches &lt;lgl&gt;, ## # approaches &lt;lgl&gt;, indifferent &lt;lgl&gt;, runs_from &lt;lgl&gt;, ## # other_interactions &lt;chr&gt;, zip_codes &lt;dbl&gt;, community_districts &lt;dbl&gt;, ## # borough_boundaries &lt;dbl&gt;, city_council_districts &lt;dbl&gt;, ## # police_precincts &lt;dbl&gt;, parsed_date &lt;date&gt; squirrel &lt;- squirrel %&gt;% mutate(date = mdy(date)) squirrel &lt;- squirrel %&gt;% mutate(month = month(date, label = T)) squirrel &lt;- squirrel %&gt;% mutate(day = wday(date, label=T)) squirrel %&gt;% select(other_interactions) %&gt;% filter(!is.na(other_interactions)) %&gt;% View() squirrel %&gt;% count(other_interactions, sort=T) ## # A tibble: 198 x 2 ## other_interactions n ## &lt;chr&gt; &lt;int&gt; ## 1 &lt;NA&gt; 2783 ## 2 runs from (dog) 9 ## 3 curious 6 ## 4 runs from (me) 5 ## 5 me 4 ## 6 stared 4 ## 7 avoided people 3 ## 8 ran up tree when approached 3 ## 9 could not get close due to fences 2 ## 10 dog 2 ## # ... with 188 more rows squirrel %&gt;% count(other_activities, sort=T) ## # A tibble: 308 x 2 ## other_activities n ## &lt;chr&gt; &lt;int&gt; ## 1 &lt;NA&gt; 2586 ## 2 digging 19 ## 3 sitting 16 ## 4 walking 14 ## 5 burying 12 ## 6 playing 11 ## 7 jumping 6 ## 8 grooming 5 ## 9 cleaning 4 ## 10 hopping 4 ## # ... with 298 more rows squirrel %&gt;% group_by(day) %&gt;% add_count() %&gt;% ggplot(aes(day,n )) + geom_line(group=1) squirrel %&gt;% count(primary_fur_color) ## # A tibble: 4 x 2 ## primary_fur_color n ## &lt;chr&gt; &lt;int&gt; ## 1 &lt;NA&gt; 55 ## 2 Black 103 ## 3 Cinnamon 392 ## 4 Gray 2473 squirrel %&gt;% count(combination_of_primary_and_highlight_color, sort=T) ## # A tibble: 22 x 2 ## combination_of_primary_and_highlight_color n ## &lt;chr&gt; &lt;int&gt; ## 1 Gray+ 895 ## 2 Gray+Cinnamon 752 ## 3 Gray+White 489 ## 4 Gray+Cinnamon, White 265 ## 5 Cinnamon+Gray 162 ## 6 Cinnamon+White 94 ## 7 Black+ 74 ## 8 Cinnamon+ 62 ## 9 Cinnamon+Gray, White 58 ## 10 + 55 ## # ... with 12 more rows squirrel %&gt;% ggplot(aes(x,y)) + geom_point() + labs(title = &quot;squirrel data for 3,023 sightings in Central Park&quot;, caption = &quot;from: https://data.cityofnewyork.us/Environment/2018-Central-Park-Squirrel-Census-Squirrel-Data/vfnx-vebw&quot;) squirrel %&gt;% ggplot(aes(x,y, color = primary_fur_color)) + geom_point() squirrel %&gt;% ggplot(aes(x,y, color = primary_fur_color)) library(leaflet) ## Warning: package &#39;leaflet&#39; was built under R version 3.5.3 squirrel %&gt;% leaflet() %&gt;% addTiles() %&gt;% addMarkers(lat = ~x, lng = ~y) "]
]
